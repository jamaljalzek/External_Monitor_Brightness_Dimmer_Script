/**** DIRECTIVE SECTION ****/

;; This is an AutoHotkey v2 script:
#Requires AutoHotkey v2.0-a (or later)

;; Enable warnings to assist with detecting common errors:
#Warn All

;; To access this file from another script in the same directory, add the line below to that script:
;; #Include "%A_ScriptDir%\DimmerSettingsWindow Class.ahk2"

/**** CLASS SECTION ****/

;; Public:
Class DimmerSettingsWindow
{
    ;; All private:
    Static SettingsWindow := "NULL"
    Static DimmerSettings := "NULL"

    ;; Public:
    Static AddNewSettingsWindowToScriptTrayMenu(dimmerSettings)
    {
        DimmerSettingsWindow.DimmerSettings := dimmerSettings
        ;; Setting a new icon does not retroactively affect existing windows.
        ;; Therefore, set it before creating the SettingsWindow:
        TraySetIcon(A_ScriptDir . "\light bulb icon.png")
        DimmerSettingsWindow.CreateSettingsWindow()
        DimmerSettingsWindow.UpdateTrayMenu()
    }

    ;; Private:
    Static CreateSettingsWindow()
    {
        DimmerSettingsWindow.SettingsWindow := Gui()
        DimmerSettingsWindow.SettingsWindow.Title := "Settings"
        DimmerSettingsWindow.SettingsWindow.SetFont("s16")
        DimmerSettingsWindow.AddDimmingStartTimeForm()
        DimmerSettingsWindow.AddDividingLine()
        DimmerSettingsWindow.AddDimmingDurationForm()
        DimmerSettingsWindow.AddSaveButton()
    }

    ;; Private:
    Static AddDimmingStartTimeForm()
    {
        ;; SECTION 0 (ROW 0):
        DimmerSettingsWindow.AddHeading("Dimming start time:", "Section")

        ;; SECTION 1 (ROWS 1 AND 2):
        ;; Create a section, which gets placed below the above section, and contains only this Text control:
        DimmerSettingsWindow.SettingsWindow.Add("Text", "Section", "Hour:")
        ;; Add a TickerBox control to the section, which gets placed below the above Text control:
        DimmerSettingsWindow.AddTickerBox("DimmingStartHour12TickerBox", 1, 12, DimmerSettingsWindow.DimmerSettings.GetDimmingStartHour12())
        ;; Add a Text control to the section, which gets placed to the right of the above TickerBox control:
        DimmerSettingsWindow.SettingsWindow.Add("Text", "X+M", ":")
        ;; Add a DropDownList control to the section, which gets placed below the above TickerBox:
        DimmerSettingsWindow.AddDimmingStartHourAMPMDropDownList()
        ;; Create a column in the section, which is added to the right of the previous column.
        ;; Then add a Text control to the top of this second column:
        DimmerSettingsWindow.SettingsWindow.Add("Text", "YS", "Minute:")
        ;; Add an Edit control, which gets placed in the second column, below the above Text control:
        DimmerSettingsWindow.AddTickerBox("DimmingStartMinute60TickerBox", 0, 59, DimmerSettingsWindow.DimmerSettings.GetDimmingStartMinute60())
    }

    ;; Private:
    Static AddHeading(headingTitle, options)
    {
        DimmerSettingsWindow.SettingsWindow.SetFont("Bold")
        DimmerSettingsWindow.SettingsWindow.Add("Text", options, headingTitle)
        DimmerSettingsWindow.SettingsWindow.SetFont("Norm")
    }

    ;; Private:
    Static AddTickerBox(nameOfTickerBox, minimumValue, maximumValue, defaultValue)
    {
        ;; The below Text control is the UpDown's "buddy control", which displays the UpDown's current value:
        DimmerSettingsWindow.SettingsWindow.Add("Text", "Background0xFFFFFF W75")
        DimmerSettingsWindow.SettingsWindow.Add("UpDown", "v" . nameOfTickerBox . " Range" . minimumValue . "-" . maximumValue, defaultValue)
    }

    ;; Private:
    Static AddDimmingStartHourAMPMDropDownList()
    {
        ;; We set PM as the default, unless the DimmerSettings say otherwise:
        selectPMOrAM := "Choose1"
        if (DimmerSettingsWindow.DimmerSettings.GetDimmingStartHourAMPM() = "AM")
        {
            selectPMOrAM := "Choose2"
        }
        DimmerSettingsWindow.SettingsWindow.Add("DropDownList",
                                                "vDimmingStartHourAMPMDropDownList XM Background0xFFFFFF W75 " . selectPMOrAM,
                                                ["PM", "AM"])
    }

    ;; Private:
    Static AddDividingLine()
    {
        DimmerSettingsWindow.SettingsWindow.SetFont("s10")
        DimmerSettingsWindow.SettingsWindow.Add("Text", "Section XS", "------------------------------------------")
        DimmerSettingsWindow.SettingsWindow.SetFont("s16")
    }

    ;; Private:
    Static AddDimmingDurationForm()
    {
        ;; SECTION 0 (ROW 0):
        DimmerSettingsWindow.AddHeading("Dimming duration:", "Section XS")

        ;; SECTION 1 (ROWS 1 AND 2):
        ;; View method AddDimmingStartTimeForm() for details on arranging GUI controls.
        DimmerSettingsWindow.SettingsWindow.Add("Text", "Section", "Hour:")
        DimmerSettingsWindow.AddTickerBox("DimmingDurationHour24TickerBox", 0, 23, DimmerSettingsWindow.DimmerSettings.GetDimmingDurationHour24())
        DimmerSettingsWindow.SettingsWindow.Add("Text", "X+M", ":")
        DimmerSettingsWindow.SettingsWindow.Add("Text", "YS", "Minute:")
        DimmerSettingsWindow.AddTickerBox("DimmingDurationMinute60TickerBox", 0, 59, DimmerSettingsWindow.DimmerSettings.GetDimmingDurationMinute60())
    }

    ;; Private:
    Static AddSaveButton()
    {
        ;; SECTION 0 (ROW 0):
        DimmerSettingsWindow.SettingsWindow.SetFont("s12")
        ;; Notice how we must specify "&&" to display a single "&":
        saveButtonObject := DimmerSettingsWindow.SettingsWindow.Add("Button", "Section X0", "Save && Reload")
        DimmerSettingsWindow.CenterSaveButton(saveButtonObject)
        saveButtonObject.OnEvent("Click", DimmerSettingsWindow.OnSaveButtonClick)
    }

    ;; Private:
    Static CenterSaveButton(saveButtonObject)
    {
        saveButtonObject.GetPos(&unused, &saveButtonYPosition, &saveButtonWidth, &saveButtonHeight)
        ;; The SettingsWindow must be shown at least once before its dimensions can be read.
        ;; As for why, it appears GUI objects do not have any dimensions calculated upon creaton.
        ;; It also appears we can call the Show() method with the "Hide" argument, so the dimensions are calculated while the SettingsWindow itself is never shown:
        DimmerSettingsWindow.SettingsWindow.Show("Hide")
        DimmerSettingsWindow.SettingsWindow.GetPos(&unused, &unused, &settingsWindowWidth, &unused)
        saveButtonNewXPosition := (settingsWindowWidth - saveButtonWidth - DimmerSettingsWindow.SettingsWindow.MarginX) // 2
        saveButtonObject.Move(saveButtonNewXPosition, saveButtonYPosition, saveButtonWidth, saveButtonHeight)
    }

    ;; Private:
    Static OnSaveButtonClick(unused)
    {
        dimmingStartHour12 := DimmerSettingsWindow.SettingsWindow["DimmingStartHour12TickerBox"].Value
        dimmingStartHourAMPM := DimmerSettingsWindow.SettingsWindow["DimmingStartHourAMPMDropDownList"].Text
        dimmingStartMinute60 := DimmerSettingsWindow.SettingsWindow["DimmingStartMinute60TickerBox"].Value
        dimmingDurationHour24 := DimmerSettingsWindow.SettingsWindow["DimmingDurationHour24TickerBox"].Value
        dimmingDurationMinute60 := DimmerSettingsWindow.SettingsWindow["DimmingDurationMinute60TickerBox"].Value
        DimmerSettingsWindow.DimmerSettings.SaveNewSettings(dimmingStartHour12,
                                                            dimmingStartHourAMPM,
                                                            dimmingStartMinute60,
                                                            dimmingDurationHour24,
                                                            dimmingDurationMinute60)
        Reload()
    }

    ;; Private:
    Static UpdateTrayMenu()
    {
        ;; To insert a new item into position N, we must include an "&" after N:
        A_TrayMenu.Insert("1&", "Edit dimming settings", DimmerSettingsWindow.ShowSettingsWindow)
        ;; The default menu item is initally "Open", giving it a bold font, which is undone when a new default is set.
        ;; Also, by changing the default item, double-clicking this script's tray icon activates the default item, now showing the SettingsWindow:
        A_TrayMenu.Default := "Edit dimming settings"
    }

    ;; Private:
    Static ShowSettingsWindow(unusedItemPosition, unusedTrayMenuObject)
    {
        ;; If this was a function instead of a method, it would require 3 parameters: (ItemName, ItemPos, MyMenu).
        ;; Because this is a method, the "ItemName" parameter is removed, and instead can be accessed by a hidden local variable: "this".
        DimmerSettingsWindow.SettingsWindow.Show()
    }
}