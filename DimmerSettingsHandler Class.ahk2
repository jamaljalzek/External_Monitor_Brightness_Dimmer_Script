/**** DIRECTIVE SECTION ****/

;; This is an AutoHotkey v2 script:
#Requires AutoHotkey v2.0-a (or later)

;; Enable warnings to assist with detecting common errors:
#Warn All

;; To access this file from another script in the same directory, add the line below to that script:
;; #Include "%A_ScriptDir%\DimmerSettingsHandler Class.ahk2"

/**** CLASS SECTION ****/

;; Public:
Class DimmerSettingsHandler
{
    ;; All private:
    PathOfSettingsFile := A_ScriptDir . "\Dimmer Settings.txt"
    DimmingStartHour12 := 0
    DimmingStartHourAMPM := ""
    DimmingStartMinute60 := 0
    DimmingDurationHour24 := 0
    DimmingDurationMinute60 := 0

    ;; Public (constructor):
    __New()
    {
        if (!this.DoesSettingsFileExist())
        {
            this.CreateDefaultSettingsFile()
        }
        this.InitializeFromSettingsFile()
    }

    ;; Private:
    DoesSettingsFileExist()
    {
        return FileExist(this.PathOfSettingsFile) != ""
    }

    ;; Private:
    CreateDefaultSettingsFile()
    {
        this.SaveNewSettings(6, "PM", 0, 2, 0)
    }

    ;; Public:
    SaveNewSettings(dimmingStartHour12, dimmingStartHourAMPM, dimmingStartMinute60, dimmingDurationHour24, dimmingDurationMinute60)
    {
        ;; Attempting to delete a file that doesn't exist throws an error instead of silently failing, so check first:
        if (this.DoesSettingsFileExist())
        {
            FileDelete(this.PathOfSettingsFile)
        }
        FileAppend(dimmingStartHour12, this.PathOfSettingsFile)
        FileAppend("`n" . dimmingStartHourAMPM, this.PathOfSettingsFile)
        FileAppend("`n" . dimmingStartMinute60, this.PathOfSettingsFile)
        FileAppend("`n" . dimmingDurationHour24, this.PathOfSettingsFile)
        FileAppend("`n" . dimmingDurationMinute60, this.PathOfSettingsFile)
    }

    ;; Private:
    InitializeFromSettingsFile()
    {
        settingsFileObject := FileOpen(this.PathOfSettingsFile, "R")
        this.DimmingStartHour12 := this.ReadNextSettingsValue(settingsFileObject)
        this.DimmingStartHourAMPM := this.ReadFromSettingsAMOrPM(settingsFileObject)
        this.DimmingStartMinute60 := this.ReadNextSettingsValue(settingsFileObject)
        this.DimmingDurationHour24 := this.ReadNextSettingsValue(settingsFileObject)
        this.DimmingDurationMinute60 := this.ReadNextSettingsValue(settingsFileObject)
        settingsFileObject.Close()
    }

    ;; Private:
    ReadNextSettingsValue(settingsFileObject)
    {
        lineRead := settingsFileObject.ReadLine()
        if (IsNumber(lineRead))
        {
            return Number(lineRead)
        }
        this.ResetToDefaultSettingsAndReloadScript(settingsFileObject)
    }

    ;; Private:
    ResetToDefaultSettingsAndReloadScript(settingsFileObject)
    {
        MsgBox("ERROR: Invalid setting detected in settings file." . "`n" .
        "Script will reset to default settings and reload after closing this window.")
        ;; Attempting to replace the settings file while its associated File object is still open throws an error, so first close the File object:
        settingsFileObject.Close()
        this.CreateDefaultSettingsFile()
        Reload()
    }

    ;; Private:
    ReadFromSettingsAMOrPM(settingsFileObject)
    {
        lineRead := settingsFileObject.ReadLine()
        if (lineRead = "AM" || lineRead = "PM")
        {
            return lineRead
        }
        this.ResetToDefaultSettingsAndReloadScript(settingsFileObject)
    }

    ;; Public:
    GetTodaysDimmingStartYYYYMMDDHH24MISS()
    {
        dimmingStartHour24 := this.GetDimmingStartHour24()
        dimmingStartHH24 := this.ConvertToTwoDigitString(dimmingStartHour24)
        dimmingStartMM60 := this.ConvertToTwoDigitString(this.DimmingStartMinute60)
        return A_YYYY . A_MM . A_DD . dimmingStartHH24 . dimmingStartMM60 . "00"
    }

    ;; Private:
    GetDimmingStartHour24()
    {
        ;; Case 1 = 12 am:
        if (this.DimmingStartHour12 = 12 && this.DimmingStartHourAMPM = "AM")
        {
            return 0
        }
        ;; Case 2 = 1 am - 11 am:
        if (this.DimmingStartHour12 < 12 && this.DimmingStartHourAMPM = "AM")
        {
            return this.DimmingStartHour12
        }
        ;; Case 3 = 12 pm:
        if (this.DimmingStartHour12 = 12 && this.DimmingStartHourAMPM = "PM")
        {
            return 12
        }
        ;; Case 4 = 1 pm - 11 pm:
        if (this.DimmingStartHour12 < 12 && this.DimmingStartHourAMPM = "PM")
        {
            return this.DimmingStartHour12 + 12
        }
    }

    ;; Private:
    ConvertToTwoDigitString(numberToConvert)
    {
        if (numberToConvert < 10)
        {
            return "0" . numberToConvert
        }
        return "" . numberToConvert
    }

    ;; Public:
    GetDimmingDurationTotalMilliseconds()
    {
        dimmingDurationTotalMinutes := this.DimmingDurationHour24 * 60 + this.DimmingDurationMinute60
        return dimmingDurationTotalMinutes * 60 * 1000
    }

    ;; Public:
    GetDimmingStartHour12()
    {
        return this.DimmingStartHour12
    }

    ;; Public:
    GetDimmingStartHourAMPM()
    {
        return this.DimmingStartHourAMPM
    }

    ;; Public:
    GetDimmingStartMinute60()
    {
        return this.DimmingStartMinute60
    }

    ;; Public:
    GetDimmingDurationHour24()
    {
        return this.DimmingDurationHour24
    }

    ;; Public:
    GetDimmingDurationMinute60()
    {
        return this.DimmingDurationMinute60
    }
}